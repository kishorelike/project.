# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GOm5_Y7qcKCC9qfsTw-WT9SHX42koX5m
"""

from google.colab import files
 uploaded = files.upload()

import pandas as pd
 # Read the dataset
 df = pd.read_csv('Churn_Modelling.csv', sep=';')

# Display first few rows
 df.head()

# Shape of the dataset
 print("Shape:", df.shape)
 # Column names
 print("Columns:", df.columns.tolist())
 # Data types and non-null values
 df.info()
 # Summary statistics for numeric features
 df.describe()

# Check for missing values
 print(df.isnull().sum())
 # Check for duplicates
 print("Duplicate rows:", df.duplicated().sum())

import seaborn as sns
import matplotlib.pyplot as plt
# Distribution of final grades

# Check the actual column names in your DataFrame
print(df.columns)

# Assuming the column is named "G3" but maybe has trailing spaces:
# Try accessing the column after stripping potential whitespace
# If 'G3' is not the actual column name, replace it with the correct name from df.columns
grade_column = df.columns[0]  # Assuming the grade column is the first one
sns.histplot(df[grade_column], kde=True)

# Or, if you find that the column has a different name, replace 'actual_column_name' with the correct one
# sns.histplot(df['actual_column_name'], kde=True)
plt.title('Distribution of Final Grade')
plt.xlabel('Final Grade')
plt.show()
# Relationship between study time and final grade
# Replace 'studytime' and 'G3' with actual column names if different
# The original code used 'studytime' which is not in the dataframe
# Instead, we will plot the distribution of the single column in the dataframe
sns.boxplot(y=grade_column, data=df)  # Removed x='studytime' since it's not in df
plt.title('Distribution of ' + grade_column)  # Changed title to reflect theÂ plot
plt.show()

# Identify categorical columns
 categorical_cols = df.select_dtypes(include=['object']).columns
 print("Categorical Columns:", categorical_cols.tolist())

df_encoded = pd.get_dummies(df, drop_first=True)